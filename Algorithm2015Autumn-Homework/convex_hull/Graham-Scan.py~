#encoding:utf-8
import sys
import types
import random

point_Num = int(sys.argv[1])
pointList = []
Threshold = 2
minY = Threshold+1
point = (0,0)

#Get random Points
for w in range(point_Num):
    x = random.randint(0,Threshold)
    y = random.randint(0,Threshold)
    pointList.append((x,y))
    if minY > y:
        minY = y
        point = (x,y)

#Functions:

#Granham-Scan
def Graham_Scan(pointList):
    #Test Data
    #pointList = [(1,2),(2,3),(-1,3),(-2,3),(-3,3),(3,3),(4,3),(1,5)]
    #point = (1,2)
    #pointList = [(1,2),(2,3),(2,4),(1,5),(3,6),(-2,9),(-3,8),(-1,7),(-4,5)]
    #point = (1,2)
    #pointList = [(0,0),(0,1),(0,2),(1,0),(2,2),(1,2),(2,0),(2,1)]
    #point = (0,0)
    #这个cmp不是那个比较函数cmp,或者这里不是给cmp赋值?搞不懂...
    #pointList = sorted(pointList,cmp=lambda x,y:cmp(x[1],y[1]))
    '''
    print(pointList)    
    print(type(pointList))
    print(type(pointList[0]))
    print(type(pointList[0][1]))'''
    #<0 & >0
    leftList = []
    rightList = []
    centerList = []
    for w in pointList:
        if w[0]<point[0]:
            leftList.append(w)
        elif w[0]>point[0]:
            rightList.append(w)
        elif w[1] != point[1]:
            centerList.append(w)
        else:
            pass
    #counter-clockwise
    #同斜率点顺序是随意的
    leftList=sorted(leftList,cmp=compare(point))
    rightList=sorted(rightList,cmp=compare(point))
    pointList=[]
    pointList.append(point)
    pointList.extend(rightList)
    pointList.extend(centerList)
    pointList.extend(leftList)
    print(pointList)
    print(isLeftMove((92,49),(71,39),(13,15),(64,2)))
    #init
    if len(pointList)<3:
        print(pointList)
        return
    stack=[]
    for w in range(3):
        stack.append(pointList.pop(0))
    #do
    for w in range(len(pointList)):
        #print(pointList)
        next = pointList.pop(0)
        while isLeftMove(stack[-2],stack[-1],next,point)=='right':
            print(stack.pop())
            if len(stack)<=2:
                break
        stack.append(next)
    print(stack)    
    return stack

#a2和point在a1,a3同侧
def isLeftMove(a1,a2,a3,point):
    A=a1[1]-a3[1]
    B=a1[0]-a3[0]
    re1 = A*a2[0]-B*a2[1]+B*a3[1]-A*a3[0]
    re2 = A*point[0]-B*point[1]+B*a3[1]-A*a3[0]
    if(re1*re2)>=0:
        return 'right'
    return 'left'

#multiply
def mul(v1,v2):
    return v1[0]*v2[0]+v1[1]*v2[1]

#So i can use 'point'
def compare(point):
    return lambda x,y:cmp(float(x[1]-point[1])/(x[0]-point[0]),float(y[1]-point[1])/(y[0]-point[0]))


#Call
Graham_Scan(pointList)
